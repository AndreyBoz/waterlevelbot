package ru.bozhov.waterlevelbot.telegram.bot.callback_handlers.edit;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import ru.bozhov.waterlevelbot.sensor.model.Sensor;
import ru.bozhov.waterlevelbot.sensor.repository.SensorRepository;
import ru.bozhov.waterlevelbot.telegram.bot.callback_handlers.BotStateCallbackHandler;
import ru.bozhov.waterlevelbot.telegram.bot.util.SensorSelectionUtil;
import ru.bozhov.waterlevelbot.telegram.model.BotState;
import ru.bozhov.waterlevelbot.telegram.model.TelegramUser;
import ru.bozhov.waterlevelbot.telegram.service.BotService;
import ru.bozhov.waterlevelbot.telegram.service.TelegramUserService;

import java.util.Collections;

@Slf4j
@Component
@AllArgsConstructor
public class EditSensorCallbackHandler implements BotStateCallbackHandler {
    private final BotService botService;
    private final SensorSelectionUtil selectionUtil;
    private final SensorRepository sensorRepo;
    private final TelegramUserService telegramUserService;

    @Override
    public Boolean matches(TelegramUser telegramUser) {
        return BotState.EDIT_SENSOR_ADDRESS.name().equals(telegramUser.getBotState());
    }

    @Override
    public void handle(Update update, TelegramUser telegramUser) {
        String callback = update.getCallbackQuery().getData();
        int messageId = update.getCallbackQuery().getMessage().getMessageId();

        EditMessageText edit = selectionUtil.handleSelection(update, callback, messageId);
        if (edit != null) {
            botService.sendEditMessage(telegramUser, edit);
        }

        Sensor selected = selectionUtil.getSelection(telegramUser.getChatId());
        if (selected != null) {
            String prompt = String.format(
                    "‚úÖ –í—ã–±—Ä–∞–Ω –¥–∞—Ç—á–∏–∫ \"%s\" (ID %d).\n\n" +
                            "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–∞—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n" +
                            "–†–µ–≥–∏–æ–Ω, –†–∞–π–æ–Ω, –¢–∏–ø –≤–æ–¥–æ—ë–º–∞, –ù–∞–∑–≤–∞–Ω–∏–µ –≤–æ–¥–æ—ë–º–∞, –ë–ª–∏–∂–∞–π—à–∏–π –≥–æ—Ä–æ–¥, –û–ø–∏—Å–∞–Ω–∏–µ.\n\n" +
                            "üìù –ü—Ä–∏–º–µ—Ä:\n" +
                            "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –ü–æ–¥–º–æ—Å–∫–æ–≤–Ω—ã–π —Ä–∞–π–æ–Ω, –û–∑–µ—Ä–æ, –°–µ–Ω–µ–∂, –°–æ–ª–Ω–µ—á–Ω–æ–≥–æ—Ä—Å–∫, –ñ–∏–≤–æ–ø–∏—Å–Ω–æ–µ –æ–∑–µ—Ä–æ –Ω–µ–¥–∞–ª–µ–∫–æ –æ—Ç –ú–æ—Å–∫–≤—ã",
                    selected.getSensorName(), selected.getId()
            );

            InlineKeyboardMarkup cancelMarkup = new InlineKeyboardMarkup(
                    Collections.singletonList(
                            Collections.singletonList(
                                    InlineKeyboardButton.builder()
                                            .text("–û—Ç–º–µ–Ω–∞")
                                            .callbackData("GO_BACK")
                                            .build()
                            )
                    )
            );

            botService.sendEditMessage(telegramUser,
                    EditMessageText.builder()
                            .chatId(String.valueOf(telegramUser.getChatId()))
                            .messageId(messageId)
                            .text(prompt)
                            .replyMarkup(cancelMarkup)
                            .build()
            );

            telegramUserService.changeBotState(telegramUser, BotState.SENSOR_EDIT_ACCEPT);
        }
    }
}
